// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Client.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - ClientRoot

@implementation ClientRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - ClientRoot_FileDescriptor

static GPBFileDescriptor *ClientRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"client"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum Platform

GPBEnumDescriptor *Platform_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Iphone\000Ipad\000Android\000";
    static const int32_t values[] = {
        Platform_Iphone,
        Platform_Ipad,
        Platform_Android,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Platform)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Platform_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Platform_IsValidValue(int32_t value__) {
  switch (value__) {
    case Platform_Iphone:
    case Platform_Ipad:
    case Platform_Android:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum ClientProtocolId

GPBEnumDescriptor *ClientProtocolId_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Default\000Login\000";
    static const int32_t values[] = {
        ClientProtocolId_Default,
        ClientProtocolId_Login,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(ClientProtocolId)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:ClientProtocolId_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL ClientProtocolId_IsValidValue(int32_t value__) {
  switch (value__) {
    case ClientProtocolId_Default:
    case ClientProtocolId_Login:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - HeadInfo

@implementation HeadInfo

@dynamic seq;
@dynamic cmd;

typedef struct HeadInfo__storage_ {
  uint32_t _has_storage_[1];
  uint32_t seq;
  uint32_t cmd;
} HeadInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "seq",
        .dataTypeSpecific.className = NULL,
        .number = HeadInfo_FieldNumber_Seq,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(HeadInfo__storage_, seq),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "cmd",
        .dataTypeSpecific.className = NULL,
        .number = HeadInfo_FieldNumber_Cmd,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(HeadInfo__storage_, cmd),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[HeadInfo class]
                                     rootClass:[ClientRoot class]
                                          file:ClientRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(HeadInfo__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Login

@implementation Login

@dynamic uid;
@dynamic protoVersion;
@dynamic forceUpdateVersion;
@dynamic platform;
@dynamic clientId;
@dynamic loginToken;
@dynamic clientVersion;

typedef struct Login__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uid;
  uint32_t protoVersion;
  uint32_t forceUpdateVersion;
  Platform platform;
  NSData *clientId;
  NSData *loginToken;
  NSData *clientVersion;
} Login__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Login__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "protoVersion",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_ProtoVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Login__storage_, protoVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "forceUpdateVersion",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_ForceUpdateVersion,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Login__storage_, forceUpdateVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "platform",
        .dataTypeSpecific.enumDescFunc = Platform_EnumDescriptor,
        .number = Login_FieldNumber_Platform,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Login__storage_, platform),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "clientId",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_ClientId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Login__storage_, clientId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "loginToken",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_LoginToken,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Login__storage_, loginToken),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "clientVersion",
        .dataTypeSpecific.className = NULL,
        .number = Login_FieldNumber_ClientVersion,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Login__storage_, clientVersion),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBytes,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Login class]
                                     rootClass:[ClientRoot class]
                                          file:ClientRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Login__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\005\002\014\000\003\022\000\005\010\000\006\n\000\007\r\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Login_Platform_RawValue(Login *message) {
  GPBDescriptor *descriptor = [Login descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Login_FieldNumber_Platform];
  return GPBGetMessageInt32Field(message, field);
}

void SetLogin_Platform_RawValue(Login *message, int32_t value) {
  GPBDescriptor *descriptor = [Login descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Login_FieldNumber_Platform];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - LoginRsp

@implementation LoginRsp

@dynamic uid;

typedef struct LoginRsp__storage_ {
  uint32_t _has_storage_[1];
  uint32_t uid;
} LoginRsp__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uid",
        .dataTypeSpecific.className = NULL,
        .number = LoginRsp_FieldNumber_Uid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(LoginRsp__storage_, uid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LoginRsp class]
                                     rootClass:[ClientRoot class]
                                          file:ClientRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LoginRsp__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
